@implements IDisposable

@if (allState.ShowCountry)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Quốc gia</h4>
                        <!-- Khi bấm vào nút Thêm sẽ gọi hàm AddClicked -->
                        <button class="btn btn-outline-success float-end" @onclick="AddClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Thêm quốc gia
                        </button>
                    </div>
                    <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Quốc gia</th>
                                        <th scope="col">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Countries.Any())
                                    {
                                        int count = 1;
                                        foreach (var item in Countries)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <!-- Khi bấm Edit sẽ truyền dữ liệu hiện có -->
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4">
                                                <div class="alert alert-info text-center">
                                                    Chưa có quốc gia nào được thêm!!!
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<CountryDialog @ref="countryDialog"
               HandleSaveOperationEvent="HandleSaveOperationEvent"
               Country="Country" />

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

@code {
    // Tham chiếu đến component dialog
    CountryDialog? countryDialog;
    // Đối tượng Country được dùng làm binding cho dialog
    Country Country = new();
    public List<Country> Countries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    // Hàm xử lý sự kiện lưu (dùng cho cả thêm và cập nhật)
    private async Task HandleSaveOperationEvent(Country country)
    {
        bool successCheck = false;
        if (country.Id > 0)
        {
            // Cập nhật (Update)
            var result = await countryService.Update(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            // Thêm mới (Insert)
            var response = await countryService.Insert(country, Constants.CountryBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            await GetCountries();
            countryDialog?.CloseDialogs();
        }
    }

    // Hàm xử lý khi bấm nút Edit
    private void EditClicked(Country selectedCountry)
    {
        // Gán dữ liệu của quốc gia được chọn vào đối tượng Country của dialog
        // (Có thể clone nếu không muốn thay đổi dữ liệu gốc khi hủy chỉnh sửa)
        Country = new Country
            {
                Id = selectedCountry.Id,
                Name = selectedCountry.Name
                // Nếu có các thuộc tính khác, copy thêm tại đây
            };

        countryDialog?.ChangeTitle("Update");
        OpenDialog();
    }

    // Hàm xử lý khi bấm nút Thêm quốc gia
    private void AddClicked()
    {
        // Reset đối tượng Country cho trường hợp thêm mới
        Country = new Country();
        countryDialog?.ChangeTitle("Add");
        OpenDialog();
    }

    // Hàm xử lý khi bấm nút Delete
    private async Task DeleteClicked(Country selectedCountry)
    {
        bool confirm = await dialogService.ConfirmAsync(
            $"Bạn có chắc chắn muốn xóa quốc gia: {selectedCountry.Name}?",
            "Xác nhận xóa");
        if (!confirm) return;
        var response = await countryService.DeleteById(selectedCountry.Id, Constants.CountryBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetCountries();
        }
    }

    // Hàm hiển thị thông báo
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Thông báo!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Cảnh báo!!!");
            return false;
        }
    }

    // Hàm mở dialog
    void OpenDialog()
    {
        countryDialog?.OpenDialogs();
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
