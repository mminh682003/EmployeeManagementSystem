@implements IDisposable
@if (allState.ShowDepartments)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Phòng bộ phận</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Thêm bộ phận
                        </button>
                    </div>
                    <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Phòng bộ phận</th>
                                        <th scope="col">Phòng tổng hợp</th>
                                        <th scope="col">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Departments.Any())
                                    {
                                        int count = 1;
                                        foreach (var item in Departments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>@item.GeneralDepartment?.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6"><div class="alert alert-info text-center">Chưa có phòng bộ phận nào được thêm!!!</div></td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style> 
    #cursorStyle {
    cursor:pointer;
    }
</style>
<DepartmentDialog @ref="departmentDialog" 
HandleSaveOperationEvent="HandleSaveOperationEvent"
Department="Department"
GeneralDepartments="GeneralDepartments"/> 



@code {
    public string Title { get; set; } = "Add";
    DepartmentDialog? departmentDialog;
    Department Department = new();
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    public List<Department> Departments { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetDepartments();
        await GetGeneralDepartment();
        allState.Action += StateHasChanged;
    }

    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }
    private async Task GetGeneralDepartment(){
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }

    void AddButtonClicked()
    {
        departmentDialog?.ChangeTitle("Add");
        Department = new Department();
        OpenDialog();
    }
    void OpenDialog()
    {
        if (departmentDialog != null)
        {
            departmentDialog.OpenDialogs();
        }
    }

    //Add và Update
    private async Task HandleSaveOperationEvent(Department department)
    {
        // Kiểm tra dữ liệu trước khi gửi yêu cầu
        if (string.IsNullOrWhiteSpace(department.Name))
        {
            await DisplayMessage(false, "Tên phòng ban không được để trống!");
            return;
        }

        if (department.GeneralDepartmentId <= 0)
        {
            await DisplayMessage(false, "Chọn phòng tổng hợp hợp lệ!");
            return;
        }

        bool successCheck = false;
        if (department.Id > 0)
        {
            var result = await departmentService.Update(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await departmentService.Insert(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            Department = new();  // Khởi tạo lại Department sau khi lưu thành công
            await GetDepartments();
            departmentDialog?.ChangeTitle("Add");
            departmentDialog?.CloseDialogs();
        }
    }


    //Edit
    private void EditClicked(Department dep)
    {
        departmentDialog?.ChangeTitle("Update");
        Department = dep;
        OpenDialog();
    }

    //Delete
    private async Task DeleteClicked(Department dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Bạn có chắc chắn muốn xóa phòng ban tổng hơp: {dep.Name}?", "Xác nhận xóa");
        if (!confirm) return;
        var respone = await departmentService.DeleteById(dep.Id, Constants.DepartmentBaseUrl);
        if (await DisplayMessage(respone.Flag, respone.Message))
        {
            await GetDepartments();
        }
    }


    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Thông báo!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync($"Có lỗi xảy ra: {message}", "Cảnh báo!!!");
            return false;
        }
    }


    public void Dispose()
    {
        allState.Action -= StateHasChanged;
        // Hủy các sự kiện hoặc dịch vụ khác nếu có
    }


}
