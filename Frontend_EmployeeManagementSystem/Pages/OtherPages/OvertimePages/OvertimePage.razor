@implements IDisposable
@if (allState.ShowOvertime)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header">
                        <h4 class="float-start">Quản lý nhân sự tăng ca</h4>
                    </div>
                    <div class="card-body">
                        <!-- Sửa vị trí thẻ này -->
                        @{
                            var tool = new List<string>() {"Excel", "PDF", "In" };
                        }
                        <SfGrid DataSource="@Overtimes"  AllowPaging="true" AllowSorting="true" Toolbar="@tool"
                        AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="3"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandle" TValue="Overtime"></GridEvents>
                            <GridColumns>
                                <GridColumn Field="@nameof(ItemModel.EmployeeId)" HeaderText="Id"></GridColumn>
                                <GridColumn HeaderText="Kiểu">
                                    <Template>
                                        @{
                                            var item = (context as Overtime);
                                            <div>
                                                @item!.OvertimeType!.Name
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field="@nameof(ItemModel.StarDate)" HeaderText="Ngày bắt đầu"></GridColumn>
                                <GridColumn Field="@nameof(ItemModel.EndDate)" HeaderText="Ngày kết thúc"></GridColumn>
                                <GridColumn Field="@nameof(ItemModel.NumberOfDay)" HeaderText="Ngày"></GridColumn>
                                <GridColumn HeaderText="Hành động">
                                    <Template>
                                        @{
                                            var item = (context as Overtime);
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item!)"></i>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
    cursor: pointer;
    }
</style>
<OvertimeDialog @ref="overtimeDialog"
ItemModel="ItemModel"
OvertimeTypes="OvertimeTypes"
HandleSaveOperationEvent="HandeleSaveOperationEvent" />
@code {
    private SfGrid<Overtime>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime? ItemModel = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<OvertimeType> OvertimeTypes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetType();
        await GetOvertime();
        allState.Action += StateHasChanged;
    }
    private async Task GetType() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
    private async Task GetOvertime() => Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
    void OpenDialog() => overtimeDialog!.OpenDialog();

    private async Task HandeleSaveOperationEvent(Overtime overtime)
    {
        var result = await overtimeService.Update(overtime, Constants.OvertimeBaseUrl);
        bool check = await DisplayMessage(result.Flag, result.Message);
        if (check)
        {
            ItemModel = new();
            await GetOvertime();
        }
    }

    private void EditClicked(Overtime item)
    {
        ItemModel = item;
        overtimeDialog?.ChangeTitle("Cập nhật");
        OpenDialog();
    }

    private async Task DeleteClicked(Overtime item)
    {
        bool check = await dialogService.ConfirmAsync("Ban có chắc chắn muốn xóa cái này không?", "Xác nhận xóa");
        if (!check) return;
        var result = await overtimeService.DeleteById(item.EmployeeId, Constants.OvertimeBaseUrl);
        bool check1 = await DisplayMessage(result.Flag, result.Message);
        if (check1)
        {
            await GetOvertime();
             StateHasChanged();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Thông báo!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Lỗi!");
            return false;
        }
    }

    // Xuất Excel / PDF / In từ toolbar (các nút còn lại)
    public async Task ToolbarClickHandle(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (DefaultGrid == null)
        {
            Console.WriteLine("LỖI: DefaultGrid chưa được khởi tạo!");
            return;
        }

        if (args.Item.Text == "Excel")
        {
            await DefaultGrid?.ExcelExport()!;
        }
        else if (args.Item.Text == "PDF")
        {
            await DefaultGrid?.PdfExport()!;
        }
        else if (args.Item.Text == "In")
        {
            await DefaultGrid.PrintAsync();
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;

}
