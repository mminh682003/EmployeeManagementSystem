@implements IDisposable
@if (allState.ShowHeath)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-warning shadow-lg">
                    <div class="card-header"><h4 class="float-start">Thông tin sức khỏe</h4></div>
                    <div class="card-header" style="max-height:580px; overflow:hidden; overflow:scroll;">
                        <div class="card-body">
                            @{
                                var tool = new List<string>() { "Tìm kiếm", "Excel", "PDF", "In" };
                            }
                            <SfGrid DataSource="@Doctors" AllowPaging="true" AllowSorting="true" Toolbar="@tool"
                                    AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridPageSettings PageSize="3"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandle" TValue="Doctor"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Doctor.EmployeeId)" HeaderText="Id"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalDiagnose)" HeaderText="Chẩn đoán y tế"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.MedicalRecommendation)" HeaderText="Lời khuyên"></GridColumn>
                                    <GridColumn Field="@nameof(Doctor.Date)" HeaderText="Ngày"></GridColumn>
                                    <GridColumn HeaderText="Hành động">
                                        <Template>
                                            @{
                                                var employee = (context as Doctor);
                                                <div>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(employee!)"></i>
                                                    <i class="bi bi-danger text-info" id="cursorStyle" @onclick="()=>DeleteClicked(employee!)"></i>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>
<DoctorDialog @ref="doctorDialog"
              Doctor="Doctor"
              HandleSaveOperationEvent="HandleSaveOperationEvent" />
@code {
    private SfGrid<Doctor>? DefaultGrid;
    DoctorDialog? doctorDialog;
    Doctor? Doctor = new();
    public List<Doctor> Doctors { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetHealth();
        allState.Action += StateHasChanged;

    }
    private async Task GetHealth() => Doctors = await doctorService.GetAll(Constants.DoctorBaseUrl);

    void AddButtonClicked()
    {
        Doctor = new();
        OpenDialog();
    }
    void OpenDialog() => doctorDialog.OpenDialog();

    private async Task HandleSaveOperationEvent(Doctor doctor)
    {
        var result = await doctorService.Update(doctor, Constants.DoctorBaseUrl);
        bool check = await DisplayMessage(result.Flag, result.Message);
        if (check)
        {
            Doctor = new();
            await GetHealth();
        }
    }

    private void EditClicked(Doctor item)
    {
        Doctor = item;
        OpenDialog();
    }
    private async Task DeleteClicked(Doctor item)
    {
        bool comfirm = await dialogService.ConfirmAsync("Bạn có chắc chắn muốn xóa không?", "Xác nhận xóa");
        if (!comfirm) return;
        var result = await doctorService.DeleteById(item.EmployeeId, Constants.DoctorBaseUrl);
        bool check = await DisplayMessage(result.Flag, result.Message);
        if (check)
        {
            await GetHealth();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Thông báo!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Lỗi!!!");
            return false;
        }
    }
    public void Dispose() => allState.Action -= StateHasChanged;

    //Xuất Excel / PDF
    public async Task ToolbarClickHandle(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
        {
            await this.DefaultGrid!.ExcelExport()!;
        }
        else if (args.Item.Text == "PDF Export")
        {
            await this.DefaultGrid!.PdfExport()!;

        }
    }
}
