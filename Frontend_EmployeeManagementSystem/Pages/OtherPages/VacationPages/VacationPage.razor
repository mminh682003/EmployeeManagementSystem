@implements IDisposable
@if (allState.ShowVacation)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-success shadow-lg">
                    <div class="card-header">
                        <h4 class="float-start">Quản lý nhân sự nghỉ phép</h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y: scroll">
                        <div class="card-body">
                            @{
                                // Các nút xuất Excel, PDF và In
                                var tool = new List<string>() { "Excel", "PDF", "In" };
                            }
                            <SfGrid DataSource="@Vacations" AllowPaging="true" AllowSorting="true" Toolbar="@tool"
                                    AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <!-- ToolbarTemplate cho phần tìm kiếm theo EmployeeId -->

                                    <div class="d-flex align-items-center mt-2 mb-2">
                                        <input type="text" placeholder="Tìm kiếm theo ID" class="form-control"
                                               style="width:200px;" @bind="searchId" />
                                        <button class="btn btn-primary ms-2" @onclick="OnSearchClick">Tìm kiếm</button>
                                    </div>

                                <GridPageSettings PageSize="3"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandle" TValue="Vacation"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field="@nameof(ItemModel.EmployeeId)" HeaderText="ID"></GridColumn>
                                    <GridColumn Field="VacationType.Name" HeaderText="Kiểu"></GridColumn>
                                    <GridColumn Field="@nameof(ItemModel.StartDate)" HeaderText="Ngày bắt đầu"></GridColumn>
                                    <GridColumn Field="@nameof(ItemModel.EndDate)" HeaderText="Ngày kết thúc"></GridColumn>
                                    <GridColumn Field="@nameof(ItemModel.NumberOfDays)" HeaderText="Số ngày"></GridColumn>
                                    <GridColumn HeaderText="Hành động">
                                        <Template>
                                            @{
                                                var item = (context as Vacation);
                                            }
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="()=>EditClicked(item!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="()=>DeleteClicked(item!)"></i>
                                            </div>
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<VacationDialog @ref="vacationDialog"
                ItemModel="ItemModel"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent"/>

@code {
    private SfGrid<Vacation>? DefaultGrid;
    VacationDialog? vacationDialog;
    Vacation? ItemModel = new();
    public List<Vacation> Vacations { get; set; } = new();
    public List<VacationType> VacationTypes { get; set; } = new();

    // Thuộc tính lưu giá trị nhập vào tìm kiếm theo EmployeeId
    private string searchId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetType();
        await GetSanctions();
        allState.Action += StateHasChanged;
    }

    private async Task GetType()
        => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    private async Task GetSanctions()
        => Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);

    void OpenDialog() => vacationDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Vacation vacation)
    {
        var result = await vacationService.Update(vacation, Constants.VacationBaseUrl);
        bool check = await DisplayMessage(result.Flag, result.Message);
        if (check)
        {
            ItemModel = new();
            await GetSanctions();
        }
    }

    private void EditClicked(Vacation item)
    {
        ItemModel = item;
        OpenDialog();
    }

    private async Task DeleteClicked(Vacation item)
    {
        bool check = await dialogService.ConfirmAsync("Ban có chắc chắn muốn xóa cái này không?", "Xác nhận xóa");
        if (!check) return;
        var result = await vacationService.DeleteById(item.EmployeeId, Constants.VacationBaseUrl);
        bool check1 = await DisplayMessage(result.Flag, result.Message);
        if (check1)
        {
            await GetSanctions();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Thông báo!");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Lỗi!");
            return false;
        }
    }

    // Xuất Excel / PDF / In từ toolbar (các nút còn lại)
    public async Task ToolbarClickHandle(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (DefaultGrid == null)
        {
            Console.WriteLine("LỖI: DefaultGrid chưa được khởi tạo!");
            return;
        }

        if (args.Item.Text == "Excel")
        {
            await DefaultGrid.ExcelExport();
        }
        else if (args.Item.Text == "PDF")
        {
            await DefaultGrid.PdfExport();
        }
        else if (args.Item.Text == "In")
        {
            await DefaultGrid.PrintAsync();
        }
    }

    // Xử lý tìm kiếm theo EmployeeId từ ô nhập liệu trong ToolbarTemplate
    private async Task OnSearchClick()
    {
        
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
